%% BuildVolumeAndDensityMats %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Simon Baker, Monash University
%  Date modified: 09-January-206
%  
%  This script builds an adjacency matrix of nodepair volumes (vol) and
%  then calculates an adjacency matrix of connection density values (den)
%  by dividing the connectivity matrix of streamline counts generated by
%  ConnStruct (adj) by vol.

function BuildVolumeAndDensityMats(SubjectID,WorkDir,CountMatInName,VarName,ParcInPath,VolMatOutName,DensityMatOutName,HCP)
    
    SubjectID=num2str(SubjectID); % SubjectID=num2str(SubjectIDs(Subj));
    fprintf(1,'Processing subject %s\n',SubjectID);
    
    % Define inputs
    CountMatInPath=[WorkDir,'/',CountMatInName];
    % Define outputs
    VolMatOutPath=[WorkDir,'/',VolMatOutName];
    DensityMatOutPath=[WorkDir,'/',DensityMatOutName];
    
    if ~isempty(dir(CountMatInPath)) && ~isempty(dir(ParcInPath))
        
        fprintf(1,'Importing connectivity matrix of streamline counts\n');
        load(CountMatInPath,VarName);
        eval(['A=',VarName,'; clear ',VarName]);
        
        fprintf(1,'Reading parcellation and identifying nodes\n');
        % Read in parcellation
	if HCP == 1
        [hdr,data]=read_hcp(ParcInPath);
	elseif HCP == 0
	[hdr,data]=read(ParcInPath);
	end
        % Find unique parcellation values
        ParcVals=double(unique(data));
        ParcVals=ParcVals(ParcVals~=0);
        
        NumNodes=length(ParcVals);
        
        % Set voxel dimensions
%         pixdim1=1; % manual
        pixdim1=hdr.dim.pixdim(1,2); % automatic
%         pixdim2=1; % manual
        pixdim2=hdr.dim.pixdim(1,3); % automatic
%         pixdim3=1; % manual
        pixdim3=hdr.dim.pixdim(1,4); % automatic
        VoxVol=(pixdim1*pixdim2*pixdim3);
        
        fprintf(1,'Calculating node volumes\n');
        NodeVols=zeros(NumNodes,3);
        for Node=1:NumNodes
            % Identify the intensity value of node i
            SegNum=ParcVals(Node);
            % Find the number of voxels in the parcellation with an
            % intensity value equal to the intensity value of node i
            NVoxels=length(find(data==SegNum));
            % Calculate the volume of node i
            SegVol=(NVoxels*VoxVol);
            % Record the intensity value of, the number of voxels in, and
            % the volume of node i in the NodeVols matrix
            NodeVols(Node,1)=SegNum;
            NodeVols(Node,2)=NVoxels;
            NodeVols(Node,3)=SegVol;
        end
        
        fprintf(1,'Building matrix of nodepair volumes\n');
        N=zeros(NumNodes);
        for i=1:NumNodes
            for j=i+1:NumNodes
                N(i,j)=NodeVols(i,3)+NodeVols(j,3);
            end
        end
        vol=N+N';
        save(VolMatOutPath,'vol','NodeVols');
        
        fprintf(1,'Calculating connection density\n');
        den=A./vol;
        indsisnan=find(isnan(den));
        den(indsisnan)=0;
        save(DensityMatOutPath,'den');
        
        fprintf(1,'Finished processing subject %s\n',SubjectID); % fprintf(1,'Finished processing subject %d of %d\n',Subj,NumSubs);
        
    elseif isempty(dir(CountMatInPath)) && isempty(dir(ParcInPath))
        fprintf(1,'Unable to process subject %s\n',SubjectID); % fprintf(1,'Unable to process subject %d of %d\n',Subj,NumSubs);
    end

end
